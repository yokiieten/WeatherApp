//
//  ForeCastViewController.swift
//  WeatherApp
//
//  Created by Sahassawat on 15/6/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ForeCastDisplayLogic: AnyObject {
    func displayForecast(viewModel: ForeCast.GetForeCast.ViewModel)
}

class ForeCastViewController: UIViewController {
    var interactor: ForeCastBusinessLogic?
    var router: (NSObjectProtocol & ForeCastRoutingLogic & ForeCastDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ForeCastInteractor()
        let presenter = ForeCastPresenter()
        let router = ForeCastRouter()
        let worker = ForeCastWorker()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = worker
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        getForeCast()
        setupTableView()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var tableView: UITableView!
    var weatherListModel  = [WeatherModel]()
    
    private func getForeCast() {
        let request = ForeCast.GetForeCast.Request()
        interactor?.getForecast(request: request)
    }
    
    private func setupTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.registerCells(classNames: [ForeCastTableViewCell.reuseIdentifer])
    }
    
    private func showAlert(localizedDescription: String) {
        let alert = UIAlertController(title: "Error", message: localizedDescription, preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "OK", style: UIAlertAction.Style.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
}

extension ForeCastViewController : ForeCastDisplayLogic {
    
    func displayForecast(viewModel: ForeCast.GetForeCast.ViewModel) {
        switch viewModel.content {
        case .loading: AIMActivityIndicatorManager.sharedInstance.shouldShowIndicator()
        case .empty: AIMActivityIndicatorManager.sharedInstance.forceHideIndicator()
        case .success(data: let data):
            weatherListModel = data
            tableView.reloadData()
            AIMActivityIndicatorManager.sharedInstance.forceHideIndicator()
        case .error(error: let error):
            showAlert(localizedDescription: error.localizedDescription)
        }
    }
}

extension ForeCastViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return weatherListModel.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: ForeCastTableViewCell.reuseIdentifer) as? ForeCastTableViewCell else { return UITableViewCell() }
        cell.config(weatherModel: weatherListModel[indexPath.row])
        return cell
    }
    
}

extension ForeCastViewController: UITableViewDelegate {
    
}
